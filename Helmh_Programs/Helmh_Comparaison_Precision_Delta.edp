// ---------------------------------------------------------------------------------
// This program compute the error between two thin layer models (TLM) with a close difference of mesh parameters.
// README files explains precisely which equations are studied.
// To work it requires the following programs :
// - Helmh_delta.edp ( !! PETS-c program)
// -----------------------------------------------------------------------------------

include "getARGV.idp";

// --------------------------------------------------------------
// Paths
// -------------------------------------------------------------

string PTPF = getARGV("-PTPF","/home/c31182/Helmh/Programs/")
string PTTF = getARGV("-PTTF","/home/c31182/Helmh/TEMP/")

// Delete the old results and create new directories
exec("rm -r "+PTTF+"Resultats");
exec("rm -r "+PTTF+"Maillages");
exec("rm -r "+PTTF+"Erreurs");
exec("mkdir "+PTTF+"Resultats "+PTTF+"Erreurs "+PTTF+"Maillages" );

// --------------------------------------------------------------
// Options
// -------------------------------------------------------------

// Incident wave
int typeuinc = getARGV("-uinc",0) ; // 0 = Planar wave, 1 = Source point

// Plot
int plotmaill = 0; // Plot Mesh ? 0 = No, 1 = Yes
int ploterror = 0; // Plot Error ? 0 = No, 1 = Yes
int plotsol = 0; // Plot Solutions ? 0 = No, 1 = Yes

// Type of thin layer
int typecouche = getARGV("-typecouche",3); // Type of the thin layer (0 : cos(t - pi), 1 : cos(t - pi/2), 2 : cos(t - 3pi/4), 3 : cos(5t), 4 : cos(-5t), 5 : 1

// Order
int ordre = getARGV("-ordre",1); // Order of the asymptotical model

// Mesh parameters iteration
int debutNptL = getARGV("-debutNptL", 50); // First mesh parameter
int finNptL = getARGV("-finNptL", 70); // Last mesh parameter
int Niter = getARGV("-Niter", 20); // Number of iterations

// --------------------------------------------------------------
// Physical Parameters
// --------------------------------------------------------------

// Material physics
real repsm =  getARGV("-repsm",100.), iepsm = getARGV("-iepsm",0.); // epsilon minus
real repsp =  getARGV("-repsp",100.), iepsp = getARGV("-iepsp",0.); // epsilon plus
real repsc = getARGV("-re",99.), iepsc = getARGV("-ie",0.); // epsilon layer
real rmum =  getARGV("-rmum",0.01), imum = getARGV("-imum",0.); // mu minus
real rmup =  getARGV("-rmup",0.01), imup = getARGV("-imup",0.); // mu plus
real rmuc = getARGV("-rm",0.11), imuc = getARGV("-im",0.); // mu layer

// Geometrical parameters and wave number
real k = getARGV("-k",1.); // wave number
real lambdap = 2*pi/(abs(k)*sqrt(repsp*rmup));
real lambdac = 2*pi/(abs(k)*sqrt(repsc*rmuc));
real lambdam = 2*pi/(abs(k)*sqrt(repsm*rmum));
real lambda = 2*pi/abs(k);
real Rext = 2 * lambda; // Exterior circle radius
real unit = lambda;  // Measure unit
real rpet = unit; // Interior circle radius
real rmoy = rpet + 0.5*lambda; // Limit radius in plus domain for error computing
real rint = rpet - 0.25*lambdam; // Limit radius in minus domain to adapt mesh
real delta = getARGV("-delta", 0.03);

int NptLa = 1.;
int NptLp = 1.;
int NptL = 1.;
real etape = -1.;
for (int i = 0; i <= Niter; i++){
	etape = etape + 1;
	NptL = debutNptL + (etape/Niter)*(finNptL-debutNptL);
	// Computing solutions
	exec("mpiexec -n 4 FreeFem++-mpi "+PTTF+"Helmh_delta.edp -typecouche "+ typecouche +" -re "+ repsc+" -ie "+ iepsc +" -rm "+ rmuc +" -im "+ imuc + " -delta "+ delta + " -ecrire " + 1 + " -NptL " + NptL + " -uinc "+ typeuinc + " -k "+ k +" -rmup "+ rmup+" -imup "+ imup+ " -repsp "+ repsp+" -iepsp "+ iepsp+" -rmum "+ rmum+" -imum "+ imum+ " -repsm "+ repsm+" -iepsm "+ iepsm+ " -PTTF " + PATHTOTEMPFOLDER);
}

etape = -1;
for (int i = 0; i < Niter; i++){
	etape = etape + 1;
	NptLa = debutNptL + (etape/Niter)*(finNptL-debutNptL);
	NptLp = debutNptL + ((etape + 1)/Niter)*(finNptL-debutNptL);

	// Recovery of meshes and creation of associated finite element spaces
	mesh ShDa = readmesh(PTTF+"Maillages/Delta_delta_" +delta+"_NptL"+ NptLa+".mesh");
	mesh ShDp = readmesh(PTTF+"Maillages/Delta_delta_" +delta+"_NptL"+ NptLp+".mesh");
	// P2 elements are important, otherwise we can't calculate errors with mass matrix and stifness matrix
	fespace XhDa(ShDa,P2);
	fespace XhDp(ShDp,P2);
	// Creation finite element spaces for region functions
	fespace PhDp(ShDp,P0);
	PhDp regDp = region;
	int iregmoinsp = regDp(0,0);
	int iregplusp = regDp(Rext - 0.000001 , 0);
	int iregintp = regDp(rint + 0.000001, 0);

	// Verification plot
	if (plotmaill == 1){
		plot(ShDa, wait=1,cmm = "ShDa");
		plot(ShDp, wait=1,cmm = "ShDp");
	}

	// Read solutions
	XhDa<complex> solDa;
	XhDp<complex> solDp;
	matrix<complex> MMp;
	matrix<complex> MMdp;

	{ifstream Matrp(PTTF+"Resultats/Matrixp_delta_" +delta+"_NptL"+ NptLp+".dat");
	    Matrp>>MMp;}

	{ifstream Matrdp(PTTF+"Resultats/Matrixdp_delta_" +delta+"_NptL"+ NptLp+".dat");
	    Matrdp>>MMdp;}

	{ifstream SolDa(PTTF+"Resultats/Delta_delta_" +delta+"_NptL"+ NptLa+".dat");
	    SolDa>>solDa[];}

	{ifstream SolDp(PTTF+"Resultats/Delta_delta_" +delta+"_NptL"+ NptLp+".dat");
	    SolDp>>solDp[];}

	// Errors writing
	matrix IP = interpolate(XhDp,XhDa);
	complex[int] MsolDp = MMp*solDp[];
	complex normPlus = sqrt( MsolDp'*solDp[]);
	complex[int] MsolDdp = MMdp*solDp[];
	complex normDPlus = sqrt( MsolDdp'*solDp[]);
	complex[int] solDaI = IP*solDa[];
	complex[int] diff1 = solDp[] - solDaI;
	complex[int] Mdiffp = MMp*diff1;
	complex[int] Mdiffdp = MMdp*diff1;
	complex errorPlus = sqrt( Mdiffp'*diff1);
	complex errorH1Plus = sqrt( Mdiffdp'*diff1);

	// Verification plot
	if (plotsol == 1){
		XhDa uplota;
		XhDp uplotp;
		XhDp uplotai;
		XhDp<complex> SolDAI;
		SolDAI[] = solDaI;
		XhDp err;
		XhDp errdx;
		XhDp errdy;
		uplota = real(solDa);
		uplotp = real(solDp);
		uplotai = real(SolDAI);
		err = abs(real(solDp - solDa));
		errdx = abs(real(dx(solDp) - dx(solDa)));
		errdy = abs(real(dy(solDp) - dy(solDa)));
		plot(uplota,wait= 1,fill =1, value = 1,cmm= "Sol A");
		plot(uplotp,wait= 1,fill =1, value = 1, cmm= "Sol P");
		plot(uplotai,wait = 1, fill =1, value = 1, cmm = "Sol AI");
		plot(err,wait = 1, fill =1, value = 1,cmm = "err");
		plot(errdx, wait = 1, fill = 1, value = 1,cmm = "errdx");
		plot(errdy, wait = 1, fill = 1, value = 1, cmm = "errdy");
	}

	// Writing errors
	{ofstream Erreur(PTTF+"Erreurs/Erreur.dat",append);
		Erreur << "NptLa = " << NptLa << endl;
		Erreur << "NptLp = " << NptLp << endl;
		Erreur << "Erreur Plus = " << real(errorPlus) << endl;
		Erreur << "Erreur H1Plus = " << real(errorH1Plus) << endl;
		Erreur << "Erreur Relative Plus = " << real(errorPlus)/real(normPlus) << endl;
		Erreur << "Erreur Relative H1Plus = " << real(errorH1Plus)/real(normDPlus) << endl;
		Erreur << endl;
	}
}
