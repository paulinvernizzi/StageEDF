// ---------------------------------------------------------------------------------
// !! PETSc program
// This program compute the error between the asymptotic model (AM) and the thin layer model (TLM).
// README files explains precisely which equations are studied.
// It does not need other programs to run, but it need that solutions are already computed.
// -----------------------------------------------------------------------------------

load "PETSc-complex"
include "getARGV.idp"
load "lapack"
include "macro_ddm.idp"

// --------------------------------------------------------------
// Paths
// -------------------------------------------------------------

string PTFF = getARGV("-PTFF","/home/c31182/Helmh/Figures/")
string PTPF = getARGV("-PTPF","/home/c31182/Helmh/Programs/")
string PTTF = getARGV("-PTTF","/home/c31182/Helmh/TEMP/")
string PTSF = getARGV("-PTSF","/home/c31182/Helmh/ErreursSauvees/")

// --------------------------------------------------------------
// Options
// -------------------------------------------------------------

// Incident wave
int typeuinc = getARGV("-uinc",0) ; // 0 = Planar wave, 1 = Source point

// Plot
int plotmaill = 0; // Plot Mesh ? 0 = No, 1 = Yes
int ploterror = 0; // Plot Error ? 0 = No, 1 = Yes
int plotsol = 0; // Plot Solutions ? 0 = No, 1 = Yes

// Iterations number
int Niter = getARGV("-Niter", 2); // Iteration number on deltas (thickness of the thin layer)
real debutdelta = getARGV("-debutdelta", 0.5); // First delta
real findelta = getARGV("-findelta", 0.03); // Last delta

// Type of thin layer
int typecouche = getARGV("-typecouche",3); // Type of the thin layer (0 : cos(t - pi), 1 : cos(t - pi/2), 2 : cos(t - 3pi/4), 3 : cos(5t), 4 : cos(-5t), 5 : 1

// Order
int ordre = getARGV("-ordre",1); // Order of the asymptotical model

// --------------------------------------------------------------
// Physical Parameters
// --------------------------------------------------------------

// Material physics
real repsm =  getARGV("-repsm",100.), iepsm = getARGV("-iepsm",0.); // epsilon minus
real repsp =  getARGV("-repsp",100.), iepsp = getARGV("-iepsp",0.); // epsilon plus
real repsc = getARGV("-re",99.), iepsc = getARGV("-ie",0.); // epsilon layer
real rmum =  getARGV("-rmum",0.01), imum = getARGV("-imum",0.); // mu minus
real rmup =  getARGV("-rmup",0.01), imup = getARGV("-imup",0.); // mu plus
real rmuc = getARGV("-rm",0.11), imuc = getARGV("-im",0.); // mu layer

// Geometrical parameters and wave number
real k = getARGV("-k",1.); // wave number
real lambdap = 2*pi/(abs(k)*sqrt(repsp*rmup));
real lambdac = 2*pi/(abs(k)*sqrt(repsc*rmuc));
real lambdam = 2*pi/(abs(k)*sqrt(repsm*rmum));
real lambda = 2*pi/abs(k);
real Rext = 2 * lambda; // Exterior circle radius
real unit = lambda;  // Measure unit
real rpet = unit; // Interior circle radius
real rmoy = rpet + 0.5*lambda; // Limit radius in plus domain for error computing
real rint = rpet - 0.25*lambdam; // Limit radius in minus domain to adapt mesh
real Nptlambda = getARGV("-NptL",70);

int[int] myN2OShD;
macro ShDlocN2O() myN2OShD// this tells buildDmesh to keep the local to global correspondance
func Pk=P2;

real delta;
real etape = -1;
for (int i = 0; i < Niter; i++){
	etape = etape + 1;
	if (Niter > 1){
			delta = debutdelta * (findelta/debutdelta)^(etape/(Niter-1));}
	else{
		delta = debutdelta;}

	// Recovery of meshes and creation of associated finite element spaces
	mesh ShA1 = readmesh(PTTF+"Maillages/Asymp_1_delta_" +delta+"_NptL"+ Nptlambda+".mesh");
	mesh ShD = readmesh(PTTF+"Maillages/Delta_delta_" +delta+"_NptL"+ Nptlambda+".mesh");
	// P2 elements are important, otherwise we can't calculate errors with mass matrix and stifness matrix
	fespace XhA1(ShA1,P2);
	fespace XhD(ShD,P2);
	fespace PhD(ShD,P0);
	PhD regD = region;
	int iregmoins = regD(0,0);
	int iregplus = regD(Rext - 0.000001 , 0);
	int iregcouche = regD(rpet + 0.000001, 0);
	int iregmoy = regD(rmoy - 0.000001 , 0);
	int iregint = regD(rint + 0.000001,0);

	// Verification plot
	if (plotmaill == 1){
		// Creation of finite element spaces
		PhD isD1 = (region == iregplus) + (region == iregmoy) + (region == iregcouche);
		PhD isD2 = (region == iregmoins);
		PhD isD3 = (region == iregcouche);
		PhD isD4 = (region == iregmoy) + (region == iregcouche);

		// Creation of separated mesh
		mesh ShD1 = trunc(ShD,abs(isD1));
		mesh ShD2 = trunc(ShD,abs(isD2));
		mesh ShD3 = trunc(ShD,abs(isD3));
		mesh ShD4 = trunc(ShD,abs(isD4));
		plot(ShA1, wait= attente,cmm = "ShA1");
		plot(ShD, wait=attente,cmm = "ShD");
		plot(ShD1,wait = attente,cmm = "ShD1");
		plot(ShD4,wait = attente,cmm = "ShD4");
		plot(ShD3,wait = attente,cmm = "ShD3");
		plot(ShD2,wait = attente,cmm = "ShD2");
	}

	// Read solutions and mass matrix
	XhA1<complex> solA1;
	XhD<complex> solD;
	matrix<complex> MMp;
	matrix<complex> MMdp;
	cout << " etape 0" << endl;
	{ifstream SolA1(PTTF+"Resultats/Asymp1_delta_" +delta+"_NptL"+ Nptlambda+".dat");
	    SolA1>>solA1[];}

	{ifstream SolD(PTTF+"Resultats/Delta_delta_" +delta+"_NptL"+ Nptlambda+".dat");
	    SolD>>solD[];}

	{ifstream Matrp(PTTF+"Resultats/Matrixp_delta_" +delta+"_NptL"+ Nptlambda+".dat");
	    Matrp>>MMp;}

	{ifstream Matrdp(PTTF+"Resultats/Matrixdp_delta_" +delta+"_NptL"+ Nptlambda+".dat");
	    Matrdp>>MMdp;}

	// Interpolation matrix
	mesh ShDloc=ShD;
	buildDmesh(ShDloc);

	fespace XhDloc(ShDloc,P2);
	 matrix IP1 = interpolate(XhDloc,XhA1,inside = 1);

	// Calculus of errors
	Mat<complex> APETSc; //Parallel PETSc matrix
	createMat(ShDloc, APETSc, Pk);
	XhD<complex> solDA1;
	{
			XhDloc<complex> solDA1loc;
			solDA1loc[] = IP1*solA1[];


	int[int] subIdx = restrict(XhDloc, XhD, myN2OShD);
	complex[int] petsctmp;
		 changeNumbering(APETSc, solDA1loc[], petsctmp);
		 changeNumbering(APETSc, solDA1loc[], petsctmp, inverse = true);

	XhD<complex> solDA1tmp;
	solDA1tmp[](subIdx)= solDA1loc[];

	mpiAllReduce(solDA1tmp[],solDA1[], mpiCommWorld,mpiSUM);
	}

if(mpirank==0){

// Now do the error computation globally. (Should be done in // in a better version as we use // for interpolation....)
	// Calculus with mass and stiffness matrix
	complex[int] MsolDp = MMp*solD[];
	complex normPlus = sqrt( MsolDp'*solD[]);
	complex[int] MsolDdp = MMdp*solD[];
	complex normDPlus = sqrt( MsolDdp'*solD[]);
	complex[int] diff1 = solD[] - solDA1[];
	complex[int] Mdiffp = MMp*diff1;
	complex[int] Mdiffdp = MMdp*diff1;
	complex errorPlus = sqrt( Mdiffp'*diff1);
	complex errorH1Plus = sqrt( Mdiffdp'*diff1);

	// Verification plot
	if (plotsol == 1){
		XhD uplot;
		XhD uplotdx;
		XhD uplotdy;
		XhA1 uplot1;
		XhA1 err1;
		XhA1 uplotdx1;
		XhA1 errdx1;
		XhA1 uplotdy1;
		XhA1 errdy1;
		uplot = real(solD);
		uplot1 = real(solA1);
		uplotdx = real(dx(solD));
		uplotdx1 = real(dx(solA1));
		uplotdy = real(dy(solD));
		uplotdy1 = real(dy(solA1));
		err1 = abs(uplot1 - uplot);
		errdx1 = abs(uplotdx1 - uplotdx);
		errdy1 = abs(uplotdy1 - uplotdy);
		plot(uplot1, wait = attente, fill = 1, value = 1, cmm = "A");
		plot(uplot,wait=attente,fill=1,value=1,cmm="D");
		plot(err1,wait = attente, fill = 1, value = 1,cmm = "Error");
		plot(errdx1,wait = attente, fill = 1, value = 1, cmm = "Erreur dx");
		plot(errdy1,wait = attente, fill = 1, value = 1, cmm = "Erreur dy");
	}
	// Errors writing
	{ofstream Erreur(PTTF+"Erreurs/Erreur.dat",append);
		Erreur << "Delta = " << delta << endl;
		Erreur << "Erreur Plus = " << real(errorPlus) << endl;
		Erreur << "Norme Plus = " << real(normPlus) << endl;
		Erreur << "Norme H1Plus = " << real(normDPlus) << endl;
		Erreur << "Erreur H1Plus = " << real(errorH1Plus) << endl;
		Erreur << "Erreur Relative Plus = " << real(errorPlus)/real(normPlus) << endl;
		Erreur << "Erreur Relative H1Plus = " << real(errorH1Plus)/real(normDPlus) << endl;
		Erreur << endl;}

 }
}
