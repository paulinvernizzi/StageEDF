include "getARGV.idp"

// --------------------------------------------------------------
// Options a
// -------------------------------------------------------------

// Onde incidente // Attention, si on veut changer l'onde incidente, il faut les changer aussi manuellement sur Helmh_asymptotic et Helmh_delta
int typeuinc = getARGV("-uinc",0) ; // 0 = onde plane, 1 = point source

// Echelle logarithmique
int loga = getARGV("-log", 1); // 1 = echelle logarithmique, 0 = non

// Plot
int plotmaill = 0; // Plot les maillages ? 0 = Non, 1 = Oui
int ploterror = 0; // Plot l'erreur ? 0 = Non, 1 = Oui
int plotsol = 0; // Plot les solutions ? 0 = Non, 1 = Oui

// Nombre d'itération
int Niter = getARGV("-Niter", 2); // Nombre d'itération sur la boucle en delta
real debutdelta = getARGV("-debutdelta", 0.3); // Debut des deltas
real findelta = getARGV("-findelta", 0.02); // Fin des deltas

// Forme couche
int typecouche = getARGV("-typecouche",3) ; // 0 = bosse gauche, 1 = bosse haut, 2 = bosse haut gauche, 3 = 5 bosses symètrie axe ordonnée, 4 = 5 bosses symétrie axe abscisse

// Ordre
int ordre = getARGV("-ordre",1); // Ordre de précision en delta

// --------------------------------------------------------------
// Paramétrage
// --------------------------------------------------------------


// Definition de variables physiques // Attention, si on veut changer les données sur moins ou plus, il faut les changer aussi manuellement sur Helmh_asymptotic et Helmh_delta
real repsm =  getARGV("-repsm",1.), iepsm = getARGV("-iepsm",0.); // epsilon moins
real repsp =  getARGV("-repsp",1.), iepsp = getARGV("-iepsp",0.); // epsilon plus
real repsc = getARGV("-re",3.), iepsc = getARGV("-ie",0.); // epsilon couche
real rmum =  getARGV("-rmum",1.), imum = getARGV("-imum",0.); // mu moins
real rmup =  getARGV("-rmup",1.), imup = getARGV("-imup",0.); // mu plus
real rmuc = getARGV("-rm",10.), imuc = getARGV("-im",0.); // mu couche

// Parametres geometrie et nb d'onde
real k = getARGV("-k",1.); // nombre d'onde
real lambdap = 2*pi/(abs(k)*sqrt(repsp*rmup));
real lambdac = 2*pi/(abs(k)*sqrt(repsc*rmuc));
real lambdam = 2*pi/(abs(k)*sqrt(repsm*rmum));
real lambda = 2*pi/abs(k);
real Rext = 2 * lambda; // Rayon du cercle exterieur
real unit = lambda;  // Unite de mesure
real rpet = unit; // Rayon du cercle intérieur
real rmoy = rpet + 0.5*lambda; //Rayon limite pour l'erreur
real rint = rpet - 0.25*lambdam; //Rayon limite pour l'erreur
real Nptlambda = getARGV("-NptL",50);
real delta;

real etape = -1;
for (int i = 0; i < Niter; i++){
	etape = etape + 1;
	if (Niter > 1){
		if (loga == 1){
			delta = debutdelta * (findelta/debutdelta)^(etape/(Niter-1));}
		else{
			delta = debutdelta + (etape/(Niter-1))*(findelta-debutdelta);}}
	else{
		delta = debutdelta;}

	// Calcul des solutions pour la solution avec couche et la solution sans couche
	exec("mpiexec -n 4 FreeFem++-mpi /home/c31182/Helmh/Helmh_delta.edp -wg -typecouche "+ typecouche +" -re "+ repsc+" -ie "+ iepsc +" -rm "+ rmuc +" -im "+ imuc + " -delta "+ delta + " -ecrire " + 1 + " -NptL " + Nptlambda + " -uinc "+ typeuinc +" -k "+ k +" -rmup "+ rmup+" -imup "+ imup+ " -repsp "+ repsp+" -iepsp "+ iepsp+" -rmum "+ rmum+" -imum "+ imum+ " -repsm "+ repsm+" -iepsm "+ iepsm );
	if (ordre == 1){
		exec("FreeFem++ /home/c31182/Helmh/Helmh_asymptotic.edp -wg -typecouche "+ typecouche +" -re "+ repsc+" -ie "+ iepsc +" -rm "+ rmuc +" -im "+ imuc + " -delta "+ delta + " -ecrire " + 1 + " -NptL " + Nptlambda + " -uinc "+ typeuinc + " -k "+ k +" -rmup "+ rmup+" -imup "+ imup+ " -repsp "+ repsp+" -iepsp "+ iepsp+" -rmum "+ rmum+" -imum "+ imum+ " -repsm "+ repsm+" -iepsm "+ iepsm);}
	if (ordre == 2){
		exec("FreeFem++ /home/c31182/Helmh/Helmh_asymptotic_ordre2.edp -wg -typecouche "+ typecouche +" -re "+ repsc+" -ie "+ iepsc +" -rm "+ rmuc +" -im "+ imuc + " -delta "+ delta + " -ecrire " + 1 + " -NptL " + Nptlambda + " -uinc "+ typeuinc + " -k "+ k +" -rmup "+ rmup+" -imup "+ imup+ " -repsp "+ repsp+" -iepsp "+ iepsp+" -rmum "+ rmum+" -imum "+ imum+ " -repsm "+ repsm+" -iepsm "+ iepsm);}}

