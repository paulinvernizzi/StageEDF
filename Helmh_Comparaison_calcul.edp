include "getARGV.idp"

// ---------------------------------------------------------------------------------
// This program compares the asymptotic model (AM) and the thin layer model (TLM).
// README files explains precisely which equations are studied.
// The reason of this file is because one cant launch a PETS-c program with a PETS-c program
// To work it requires the following programs :
// - Helmh_Comparaison_comparaison.edp (PETS-c code)
// - Helmh_delta.edp (PETS-c code)
// - Helmh_asymptotic.edp (if you want to test the asymptotic model at order 1)
// - Helmh_asymptotic_ordre2.edp (if you want to test the asymptotic model at order 2).
// -----------------------------------------------------------------------------------

// --------------------------------------------------------------
// Paths
// -------------------------------------------------------------

string PTFF = getARGV("-PTFF","/home/c31182/Helmh/Figures/")
string PTPF = getARGV("-PTPF","/home/c31182/Helmh/Programs/")
string PTTF = getARGV("-PTTF","/home/c31182/Helmh/TEMP/")
string PTSF = getARGV("-PTSF","/home/c31182/Helmh/ErreursSauvees/")

// --------------------------------------------------------------
// Options
// -------------------------------------------------------------

// Incident wave
int typeuinc = getARGV("-uinc",0) ; // 0 = onde plane, 1 = point source

// Plot
int plotmaill = 0; // Plot Mesh ? 0 = No, 1 = Yes
int ploterror = 0; // Plot Error ? 0 = No, 1 = Yes
int plotsol = 0; // Plot Solutions ? 0 = No, 1 = Yes

// Iterations number
int Niter = getARGV("-Niter", 2); // Iteration number on deltas (thickness of the thin layer)
real debutdelta = getARGV("-debutdelta", 0.5); // First delta
real findelta = getARGV("-findelta", 0.03); // Last delta

// Type of thin layer
int typecouche = getARGV("-typecouche",3); // Type of the thin layer (0 : cos(t - pi), 1 : cos(t - pi/2), 2 : cos(t - 3pi/4), 3 : cos(5t), 4 : cos(-5t), 5 : 1

// Order
int ordre = getARGV("-ordre",1); // Order of the asymptotical model

// --------------------------------------------------------------
// Physical Parameters
// --------------------------------------------------------------

// Material physics
real repsm =  getARGV("-repsm",100.), iepsm = getARGV("-iepsm",0.); // epsilon minus
real repsp =  getARGV("-repsp",100.), iepsp = getARGV("-iepsp",0.); // epsilon plus
real repsc = getARGV("-re",99.), iepsc = getARGV("-ie",0.); // epsilon layer
real rmum =  getARGV("-rmum",0.01), imum = getARGV("-imum",0.); // mu minus
real rmup =  getARGV("-rmup",0.01), imup = getARGV("-imup",0.); // mu plus
real rmuc = getARGV("-rm",0.11), imuc = getARGV("-im",0.); // mu layer

// Geometrical parameters and wave number
real k = getARGV("-k",1.); // nombre d'onde
real lambdap = 2*pi/(abs(k)*sqrt(repsp*rmup));
real lambdac = 2*pi/(abs(k)*sqrt(repsc*rmuc));
real lambdam = 2*pi/(abs(k)*sqrt(repsm*rmum));
real lambda = 2*pi/abs(k);
real Rext = 2 * lambda; // Rayon du cercle exterieur
real unit = lambda;  // Unite de mesure
real rpet = unit; // Rayon du cercle int√©rieur
real rmoy = rpet + 0.5*lambda; //Rayon limite pour l'erreur
real rint = rpet - 0.25*lambdam; //Rayon limite pour l'erreur
real Nptlambda = getARGV("-NptL",70);

real delta;
real etape = -1;
for (int i = 0; i < Niter; i++){
	etape = etape + 1;
	if (Niter > 1){
			delta = debutdelta * (findelta/debutdelta)^(etape/(Niter-1));}
	else{
		delta = debutdelta;}

	// Calcul des solutions pour la solution avec couche et la solution sans couche
	exec("mpiexec -n 4 FreeFem++-mpi "+PTPF+"Helmh_delta.edp -wg -typecouche "+ typecouche +" -re "+ repsc+" -ie "+ iepsc +" -rm "+ rmuc +" -im "+ imuc + " -delta "+ delta + " -ecrire " + 1 + " -NptL " + Nptlambda + " -uinc "+ typeuinc +" -k "+ k +" -rmup "+ rmup+" -imup "+ imup+ " -repsp "+ repsp+" -iepsp "+ iepsp+" -rmum "+ rmum+" -imum "+ imum+ " -repsm "+ repsm+" -iepsm "+ iepsm );
	if (ordre == 1){
		exec("FreeFem++ "+PTPF+"Helmh_asymptotic.edp -wg -typecouche "+ typecouche +" -re "+ repsc+" -ie "+ iepsc +" -rm "+ rmuc +" -im "+ imuc + " -delta "+ delta + " -ecrire " + 1 + " -NptL " + Nptlambda + " -uinc "+ typeuinc + " -k "+ k +" -rmup "+ rmup+" -imup "+ imup+ " -repsp "+ repsp+" -iepsp "+ iepsp+" -rmum "+ rmum+" -imum "+ imum+ " -repsm "+ repsm+" -iepsm "+ iepsm);}
	if (ordre == 2){
		exec("FreeFem++ "+PTPF+"Helmh_asymptotic_ordre2.edp -wg -typecouche "+ typecouche +" -re "+ repsc+" -ie "+ iepsc +" -rm "+ rmuc +" -im "+ imuc + " -delta "+ delta + " -ecrire " + 1 + " -NptL " + Nptlambda + " -uinc "+ typeuinc + " -k "+ k +" -rmup "+ rmup+" -imup "+ imup+ " -repsp "+ repsp+" -iepsp "+ iepsp+" -rmum "+ rmum+" -imum "+ imum+ " -repsm "+ repsm+" -iepsm "+ iepsm);}}

